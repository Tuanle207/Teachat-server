{"version":3,"sources":["img/sprite.svg","components/BackgroundVideo/rain-scene-medium.mp4","actions/actionType.js","reducers/authenticationReducer.js","reducers/chatListReducer.js","reducers/currentChatReducer.js","reducers/messagesReducer.js","reducers/UIStateReducer.js","reducers/peopleReducer.js","reducers/friendRequestReducer.js","reducers/index.js","components/BackgroundVideo/BackgroundVideo.js","components/Button/Button.js","apis/socketio.js","apis/serverApi.js","actions/index.js","components/LoginForm/Login/Login.js","components/LoginForm/LoginForm.js","components/Chat/SideBar/ProfileBox/ProfileBox.js","components/Spinner/Spinner.js","utils/index.js","components/Chat/SideBar/ChatList/ChatList.js","components/Chat/SideBar/BottomBar/BottomBar.js","components/Chat/SideBar/FriendSearch/FriendSearchForm/FriendSearchForm.js","components/Chat/SideBar/FriendSearch/FriendSearchList/FriendSearchList.js","components/Chat/SideBar/FriendSearch/FriendSearch.js","components/Chat/SideBar/ChatSearchBar/ChatSearchBar.js","components/Chat/SideBar/SideBar.js","components/Chat/Conversation/TopBar/TopBar.js","components/Chat/Conversation/ChatInput/ChatInput.js","components/Chat/Conversation/ConversationBox/ConversationBox.js","components/Chat/Conversation/EmojiBox/EmojiBox.js","components/Chat/Conversation/Conversation.js","components/Chat/Chat.js","components/App/App.js","index.js"],"names":["module","exports","INITIAL_STATE","loggedIn","user","error","authenticationReducer","state","action","type","ACTION_TYPE","payload","friends","push","chatListReducer","newState","searching","id","chat","latestMessage","newChat","_id","currentChatReducer","messagesReducer","INITIAL","loginLoading","messagesLoading","chatsLoading","friendRequestsShowing","userOperationShowing","emojiShowing","searchPeopleShowing","UIStateReducer","peopleReducer","friendRequestReducer","filter","el","reducers","combineReducers","authReducer","chatsReducer","form","formReducer","currentChat","messages","UIState","friendRequests","BackgroundVideo","className","autoPlay","muted","loop","src","backVideo","Button","text","link","to","io","connect","axios","create","baseURL","getHeaders","Cookies","get","handleRequest","request","dispatch","actions","storeToken","a","response","console","log","data","status","set","token","checkLoggedIn","serverApi","post","headers","setTimeout","getChats","name","split","join","url","chats","forEach","getMessages","chatId","getState","showEmoji","resetUIState","showSearchPeople","searchFriends","username","doSearchFriends","Login","onSubmit","formValues","email","password","props","login","input","meta","htmlFor","placeholder","autoComplete","autoFocus","xlinkHref","svgIcon","this","handleSubmit","Field","component","renderInput","href","React","Component","reduxLoginForm","reduxForm","socket","emit","userId","message","LoginForm","document","title","isLoggedIn","ProfileBox","showFriendRequests","showUserOperation","acceptFriend","requestId","acceptFriendRequest","renderFriendRequest","length","style","marginTop","map","from","key","alt","nickName","onClick","bind","removeFriendRequest","on","receiveFriendRequest","currentUser","getFriendRequest","logout","mapDispatchToProps","success","fail","patch","friendId","createChatResponse","delete","Spinner","color","fill","compareDate","chatA","chatB","date1","Date","sentAt","date2","ObjectToArray","obj","Object","keys","onChangeSubmit","onChange","event","isEmptyObject","undefined","constructor","ChatList","startChat","lastMessageSender","sender","participants","find","x","arr","sort","participant","getFriend","additionalClass","renderMessageSender","result","includes","count","substr","limitWordsInText","renderChats","idChat","resetMessagesLoading","BottomBar","FriendSearchForm","peopleSearchKeyword","display","FriendSearch","FriendSearchList","isFriend","renderRelationOption","friendRequested","sendFriendRequest","people","renderPeople","friendRequest","peopleSearch","values","ChatSearchBar","chatSearchKeyword","ChatSearchBarForm","SideBar","TopBar","currentFriend","ChatInput","trim","sendMessage","ChatInputForm","onSubmitSuccess","reset","err","ConversationBox","ref","createRef","receiveMessage","preProps","current","scrollTop","scrollHeight","lastItem","temp","i","groupArrayItems","margin","renderMessages","EmojtBox","onEmojiClick","emoji","chatInput","change","native","bindActionCreators","Conversation","Chat","App","path","exact","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.9f5a4004.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sprite.e802de9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain-scene-medium.410acbcd.mp4\";","export default {\r\n    SUCCEED_LOGIN: 'SUCCEED_LOGIN',\r\n    FAIL_LOGIN: 'FAIL_LOGIN',\r\n    LOG_OUT: 'LOG_OUT',\r\n    FAIL_REQUEST: 'FAIL_REQUEST',\r\n    ADD_FRIEND_ID: 'ADD_FRIEND_ID',\r\n\r\n    GET_CHATS: 'GET_FRIENDS_LIST',\r\n    START_CHAT: 'START_CHAT',\r\n    CREATE_CHAT: 'CREATE_CHAT',\r\n\r\n    GET_MESSAGES: 'GET_MESSAGESA',\r\n    SEND_MESSAGE: 'SEND_MESSAGE',\r\n    RECEIVE_MESSAGE: 'RECEIVE_MESSAGE',\r\n    \r\n    SEARCH_FRIENDS: 'SEARCH_FRIENDS',\r\n    \r\n    GET_FRIEND_REQUESTS: 'GET_FRIEND_REQUESTS',\r\n    RECEIVE_FRIEND_REQUEST: 'RECEIVE_FRIEND_REQUEST',\r\n    ACCEPT_FRIEND_REQUEST: 'ACCEPT_FRIEND_REQUEST',\r\n    REMOVE_FRIEND_REQIEST: 'REMOVE_FRIEND_REQIEST',\r\n    \r\n    LOAD_LOGIN_FINISH: 'LOAD_LOGIN_FINISH',\r\n    LOAD_CHATS_FINISH: 'LOAD_CHATS_FINISH',\r\n    LOAD_MESSAGES_FINISH: 'LOAD_MESSAGES_FINISH',\r\n    SHOW_FRIEND_REQUESTS: 'SHOW_FRIEND_REQUESTS',\r\n    SHOW_USER_OPERATION: 'SHOW_USER_OPERATION',\r\n    SHOW_EMOJI: 'SHOW_EMOJI',\r\n    SHOW_SEARCH_PEOPLE: 'SHOW_SEACH_PEOPLE'\r\n};\r\n","import ACTION_TYPE from '../actions/actionType';\r\n\r\nconst INITIAL_STATE = {\r\n    loggedIn: false,\r\n    user: null,\r\n    error: null\r\n}\r\n\r\nconst authenticationReducer = (\r\n    state = INITIAL_STATE, action\r\n) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SUCCEED_LOGIN:\r\n            return { ...state, loggedIn: true, user: action.payload };\r\n        case ACTION_TYPE.FAIL_LOGIN:\r\n            return { ...state, error: action.payload }\r\n        case ACTION_TYPE.ADD_FRIEND_ID:\r\n            const {user} = state;\r\n            user.friends.push(action.payload);\r\n            return { ...state, user};\r\n        case ACTION_TYPE.LOG_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authenticationReducer;\r\n","import ACTION_TYPE from '../actions/actionType';\r\n\r\nconst chatListReducer = (state = {}, action) => {\r\n    let newState = {};\r\n    switch (action.type) {\r\n        case ACTION_TYPE.GET_CHATS:\r\n            if (action.payload.searching) {\r\n                delete action.payload.searching;\r\n                return action.payload;\r\n            } else {\r\n                return {...state, ...action.payload};\r\n            }\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n        case ACTION_TYPE.RECEIVE_MESSAGE:\r\n            const id = action.payload.chat;\r\n            newState = {...state};\r\n            newState[id].latestMessage = action.payload;\r\n            return newState;\r\n        case ACTION_TYPE.CREATE_CHAT:\r\n            newState = {...state};\r\n            const newChat = `${action.payload._id}`;\r\n            newState[newChat] = action.payload;\r\n            return newState;\r\n        case ACTION_TYPE.LOG_OUT:\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default chatListReducer;","import ACTION_TYPE from '../actions/actionType';\r\n\r\nconst currentChatReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.START_CHAT:\r\n            return action.payload;\r\n        case ACTION_TYPE.LOG_OUT:\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default currentChatReducer;","import ACTION_TYPE from '../actions/actionType'\r\n\r\nconst messagesReducer = (state = {}, action) => {\r\n    let newState = {};\r\n    switch (action.type) {\r\n        case ACTION_TYPE.GET_MESSAGES:\r\n            return {...state, ...action.payload};\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n            newState = {...state};\r\n            newState[action.payload.chat].push(action.payload);\r\n            return newState;\r\n        case ACTION_TYPE.RECEIVE_MESSAGE:\r\n            newState = {...state};\r\n            newState[action.payload.chat].push(action.payload);\r\n            return newState;\r\n        case ACTION_TYPE.LOG_OUT:\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nexport default messagesReducer;","import ACTION_TYPE from '../actions/actionType'; \r\n\r\nconst INITIAL = {\r\n    loginLoading: true,\r\n    messagesLoading: true,\r\n    chatsLoading: true,\r\n    friendRequestsShowing: false,\r\n    userOperationShowing: false,\r\n    emojiShowing: false,\r\n    searchPeopleShowing: false\r\n}\r\n\r\nconst UIStateReducer = (state = INITIAL, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.LOAD_CHATS_FINISH:\r\n        case ACTION_TYPE.LOAD_MESSAGES_FINISH: \r\n        case ACTION_TYPE.LOAD_LOGIN_FINISH:\r\n        case ACTION_TYPE.SHOW_FRIEND_REQUESTS:\r\n        case ACTION_TYPE.SHOW_EMOJI:\r\n        case ACTION_TYPE.SHOW_USER_OPERATION:\r\n        case ACTION_TYPE.SHOW_SEARCH_PEOPLE:\r\n            return {...state, ...action.payload};\r\n        case ACTION_TYPE.LOG_OUT:\r\n            return INITIAL;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default UIStateReducer;","import ACTION_TYPE from '../actions/actionType';\r\n\r\n\r\nconst INITIAL = [];\r\n\r\nconst peopleReducer = (state = INITIAL, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SEARCH_FRIENDS:\r\n            return action.payload;\r\n        case ACTION_TYPE.FAIL_REQUEST:\r\n            return INITIAL;\r\n        case ACTION_TYPE.LOG_OUT:\r\n            return INITIAL;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default peopleReducer;","import ACTION_TYPE from '../actions/actionType';\r\n\r\nconst INITIAL = [];\r\n\r\nconst friendRequestReducer = (state = INITIAL, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.GET_FRIEND_REQUESTS:\r\n            return action.payload;\r\n        case ACTION_TYPE.RECEIVE_FRIEND_REQUEST:\r\n            return [...state, action.payload];\r\n        case ACTION_TYPE.ACCEPT_FRIEND_REQUEST:\r\n        case ACTION_TYPE.REMOVE_FRIEND_REQIEST:\r\n            return state.filter(el => el._id !== action.payload);\r\n        case ACTION_TYPE.FAIL_REQUEST:\r\n        case ACTION_TYPE.LOG_OUT:\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default friendRequestReducer;","import { combineReducers } from 'redux';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport authenticationReducer from './authenticationReducer';\r\nimport chatListReducer from './chatListReducer';\r\nimport currentChatReducer from './currentChatReducer';\r\nimport messagesReducer from './messagesReducer';\r\nimport UIStateReducer from './UIStateReducer';\r\nimport peopleReducer from './peopleReducer';\r\nimport friendRequestReducer from './friendRequestReducer';\r\n\r\nconst reducers = combineReducers({\r\n    authReducer: authenticationReducer,\r\n    chatsReducer: chatListReducer,\r\n    form: formReducer,\r\n    currentChat: currentChatReducer,\r\n    messages: messagesReducer,\r\n    UIState: UIStateReducer,\r\n    peopleReducer: peopleReducer,\r\n    friendRequests: friendRequestReducer\r\n});\r\n\r\nexport default reducers;\r\n","import React from 'react';\r\nimport './BackgroundVideo.css';\r\nimport backVideo from './rain-scene-medium.mp4';\r\n\r\nconst BackgroundVideo = () => {\r\n    return (\r\n        <div className=\"bg-video\">\r\n            <video\r\n                className=\"bg-video__content\"\r\n                autoPlay={true}\r\n                muted={true}\r\n                loop={true}\r\n            >\r\n                <source src={backVideo} type=\"video/mp4\" />\r\n                \"Your broswer is not support!\"\r\n            </video>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BackgroundVideo;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Button.css';\r\n\r\nconst Button = ({ type, text, link, className }) => {\r\n    return type === 'button' ? (\r\n        <button type=\"submit\" className={`btn ${className}`}>{text}</button>\r\n    ) : (\r\n        <Link to=\"/login\" className={`a-btn ${className}`}>\r\n            {text}\r\n        </Link>\r\n    );\r\n};\r\nexport default Button;\r\n","import io from 'socket.io-client';\r\n\r\nexport default io.connect('http://localhost:5000/');","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'http://localhost:5000'\r\n});\r\n","import Cookies from 'js-cookie';\r\nimport socket from '../apis/socketio';\r\nimport serverApi from '../apis/serverApi';\r\nimport ACTION_TYPE from './actionType';\r\n\r\nconst getHeaders = () => {\r\n    return {'Authorization': 'Bearer ' + Cookies.get('jwt')};\r\n};\r\n\r\nconst handleRequest = async (request, dispatch, actions, storeToken) => {\r\n    try {\r\n        const response = await request;\r\n        console.log(response.data);\r\n\r\n        if (response.data.status === 'success') {\r\n            if (storeToken) Cookies.set('jwt', response.data.token);\r\n\r\n            dispatch(actions['success']);\r\n        }\r\n    } catch (err) {\r\n        dispatch(actions['fail']);\r\n    }\r\n};\r\n\r\nexport const login = (email, password) => async dispatch  => {\r\n    \r\n    const response = await serverApi.post('/api/v1/users/login',\r\n    {\r\n        email, password\r\n    }\r\n    );\r\n\r\n    if (response.data.status === 'success') {\r\n        Cookies.set('jwt', response.data.token);\r\n        \r\n        dispatch({\r\n            type: ACTION_TYPE.SUCCEED_LOGIN,\r\n            payload: response.data.data.user,\r\n        });\r\n        // configure for wating for sending request\r\n        socket.emit('joinFriendRequest', {userId: response.data.data.user._id});\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_LOGIN,\r\n            payload: response.data.message\r\n        })\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n    resetUIState(dispatch);\r\n    const request = serverApi.get('/api/v1/users/logout');\r\n    const actions = {\r\n        success: {type: ACTION_TYPE.LOG_OUT},\r\n        fail: {type: ACTION_TYPE.FAIL_REQUEST, payload: {error: 'Internal Server Error!'}}\r\n    }\r\n    handleRequest(request, dispatch, actions, true);\r\n\r\n};\r\n\r\nexport const checkLoggedIn = () => async (dispatch) => {\r\n    try {\r\n        const response = await serverApi.post('/api/v1/users/checkLoggedIn', {}, {\r\n            headers: getHeaders()\r\n        });\r\n        if (response.data.status === 'success') {\r\n            dispatch({\r\n                type: ACTION_TYPE.SUCCEED_LOGIN,\r\n                payload: response.data.data.user,\r\n            });\r\n        }\r\n    } catch(err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_LOGIN,\r\n            payload: 'You have not logged in yet!',\r\n        });\r\n    }\r\n    setTimeout(() => {\r\n        dispatch({\r\n            type: ACTION_TYPE.LOAD_LOGIN_FINISH,\r\n            payload: {loginLoading: false}\r\n        })\r\n    }, 1000);\r\n};\r\n\r\n\r\nexport const getChats = (name) => async dispatch => {\r\n    try {\r\n        if (name) {\r\n            name = name.split(' ').join('-');\r\n        }\r\n        const url = `/api/v1/chats${ name ? '/?name=' + name : ''}`;\r\n        const response = await serverApi.get(url, {\r\n            headers: getHeaders()\r\n        });\r\n        \r\n        const chats = {};\r\n        response.data.data.forEach(chat => {\r\n            chats[`${chat._id}`] = chat; \r\n        });\r\n        if (name) chats.searching = true;\r\n        dispatch({\r\n            type: ACTION_TYPE.GET_CHATS,\r\n            payload: chats\r\n        });\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: ACTION_TYPE.LOAD_CHATS_FINISH,\r\n                payload: {chatsLoading: false}\r\n            });\r\n        }, 100);\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};\r\n\r\nconst getMessages = async (chatId, dispatch, getState) => {\r\n    try {\r\n        if (!getState().messages[chatId]) {\r\n            const response = await serverApi.get(`/api/v1/messages/${chatId}`, {\r\n                headers: getHeaders()\r\n            })\r\n            const payload = {};\r\n            payload[`${chatId}`] = response.data.messages;\r\n            dispatch({\r\n                type: ACTION_TYPE.GET_MESSAGES,\r\n                payload: payload\r\n            });\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};\r\n\r\nexport const startChat = chat => async (dispatch, getState) => {\r\n    resetUIState(dispatch);\r\n    dispatch({\r\n        type: ACTION_TYPE.LOAD_MESSAGES_FINISH,\r\n        payload: {messagesLoading: true}\r\n    })\r\n\r\n    dispatch({\r\n        type: ACTION_TYPE.START_CHAT,\r\n        payload: chat\r\n    });\r\n    // configure for waiting new message incomming\r\n    socket.emit('join', {idChat: chat._id});\r\n    // get corresponding messages\r\n    await getMessages(chat._id, dispatch, getState);\r\n    setTimeout(() =>  {\r\n        dispatch({\r\n            type: ACTION_TYPE.LOAD_MESSAGES_FINISH,\r\n            payload: {messagesLoading: false}\r\n        });\r\n    }, 200);\r\n};\r\n\r\nexport const sendMessage = message => async (dispatch) => {\r\n    try {\r\n        // const response = await serverApi.get('/api/v1/users/create-unique-id', {\r\n        //     headers: getHeaders()\r\n        // });\r\n        // message._id = response.data.messageIdCreated;\r\n        dispatch({\r\n            type: ACTION_TYPE.SEND_MESSAGE,\r\n            payload: message\r\n        });\r\n        socket.emit('sendMessage', message);\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n    \r\n};\r\n\r\nexport const receiveMessage = message => dispatch => {\r\n    dispatch({\r\n        type: ACTION_TYPE.RECEIVE_MESSAGE,\r\n        payload: message\r\n    });\r\n};\r\n\r\nexport const showFriendRequests = status => dispatch => {\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_FRIEND_REQUESTS,\r\n        payload: {friendRequestsShowing: status}\r\n    })\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_USER_OPERATION,\r\n        payload: {userOperationShowing: false}\r\n    })\r\n};\r\n\r\nexport const showUserOperation = status => dispatch => {\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_USER_OPERATION,\r\n        payload: {userOperationShowing: status}\r\n    })\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_FRIEND_REQUESTS,\r\n        payload: {friendRequestsShowing: false}\r\n    })\r\n};\r\n\r\nexport const showEmoji = status => dispatch => {\r\n    resetUIState(dispatch);\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_EMOJI,\r\n        payload: {emojiShowing: status}\r\n    })\r\n};\r\n\r\nexport const showSearchPeople = status => dispatch => {\r\n    resetUIState(dispatch);\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_SEARCH_PEOPLE,\r\n        payload: {searchPeopleShowing: status}\r\n    })\r\n};\r\n\r\nconst resetUIState = (dispatch) => {\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_USER_OPERATION,\r\n        payload: {userOperationShowing: false}\r\n    });\r\n    dispatch({\r\n        type: ACTION_TYPE.SHOW_FRIEND_REQUESTS,\r\n        payload: {friendRequestsShowing: false}\r\n    });\r\n};\r\n\r\nexport const resetMessagesLoading = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION_TYPE.LOAD_MESSAGES_FINISH,\r\n        payload: {messagesLoading: false}\r\n    });\r\n}\r\n\r\nexport const searchFriends = username => dispatch => {\r\n    doSearchFriends(username, dispatch);\r\n};\r\n\r\nconst doSearchFriends = async (username, dispatch) => {\r\n    let request;\r\n    if (username) {\r\n        request = serverApi.get(`/api/v1/users/searchFriends?username=${username}`, {\r\n            headers: getHeaders()\r\n        });\r\n    }\r\n    else {\r\n        request = serverApi.get('/api/v1/users/friends', {\r\n            headers: getHeaders()\r\n        })\r\n    }\r\n    try {\r\n        const response = await request;\r\n        if (response.data.status === 'success') {\r\n            dispatch({\r\n                type: ACTION_TYPE.SEARCH_FRIENDS,\r\n                payload: response.data.data\r\n            });\r\n        }\r\n    } catch(err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};\r\n\r\nexport const sendFriendRequest = friendId => async (dispatch, getState) => {\r\n    try {\r\n       \r\n        const friendRequest = {\r\n            from: getState().authReducer.user._id, \r\n            to: friendId\r\n        };\r\n        // await serverApi.post('/api/v1/users/friendRequest', {friendId}, {\r\n        //     headers: getHeaders()\r\n        // });\r\n        socket.emit('sendFriendRequest', friendRequest);\r\n        await doSearchFriends(getState().form.peopleSearch.values.peopleSearchKeyword, dispatch);\r\n    } catch(err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};\r\n\r\nexport const receiveFriendRequest = (request) => dispatch => {\r\n    dispatch({\r\n        type: ACTION_TYPE.RECEIVE_FRIEND_REQUEST,\r\n        payload: request\r\n    });\r\n}\r\n\r\nexport const getFriendRequest = () => async dispatch => {\r\n    try {\r\n        const response = await serverApi.get('/api/v1/users/friendRequest', {headers: getHeaders()});\r\n        if (response.data.status === 'success') {\r\n            const friendRequests = response.data.data;\r\n            dispatch({\r\n                type: ACTION_TYPE.GET_FRIEND_REQUESTS,\r\n                payload: friendRequests\r\n            });\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};\r\n\r\nexport const acceptFriendRequest = (requestId) => async dispatch => {\r\n    try {\r\n        const response = await serverApi.patch('/api/v1/users/friendRequest', {requestId}, {headers: getHeaders()});\r\n        if (response.data.status === 'success') {\r\n            dispatch({\r\n                type: ACTION_TYPE.ACCEPT_FRIEND_REQUEST,\r\n                payload: requestId\r\n            });\r\n            const friendId = response.data.data;\r\n            dispatch({\r\n                type: ACTION_TYPE.ADD_FRIEND_ID,\r\n                payload: friendId\r\n            });\r\n            const createChatResponse = await serverApi.post('/api/v1/chats', {friendId}, {headers: getHeaders()});\r\n            dispatch({\r\n                type: ACTION_TYPE.CREATE_CHAT,\r\n                payload: createChatResponse.data.data\r\n            });\r\n        }\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};\r\n\r\nexport const removeFriendRequest = requestId => async dispatch => {\r\n    try {\r\n        await serverApi.delete(`/api/v1/users/friendRequest/${requestId}`, {headers: getHeaders()});\r\n        dispatch({\r\n            type: ACTION_TYPE.REMOVE_FRIEND_REQIEST,\r\n            payload: requestId\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTION_TYPE.FAIL_REQUEST,\r\n            payload: {error: 'Internal Server Error!'}\r\n        });\r\n    }\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, Field } from 'redux-form';\r\n\r\nimport Button from '../../Button/Button';\r\nimport { login } from '../../../actions/index';\r\nimport svgIcon from '../../../img/sprite.svg';\r\nimport './Login.css';\r\n\r\n\r\nclass Login extends React.Component {\r\n\r\n\r\n    renderInput({input, meta}) {\r\n        const {name} = input;\r\n        return (\r\n            <div className=\"login-form__input-wrap\">\r\n            <label\r\n                htmlFor={`${name}-login`}\r\n                className=\"login-form__label\"\r\n            >\r\n                {name}\r\n            </label>\r\n            <input\r\n                {...input}\r\n                name={`${name}`}\r\n                type={`${name}`}\r\n                className=\"login-form__info\"\r\n                placeholder={name==='email' ? \"Type your email address\" : \"Type your password\"}\r\n                id={`${name}-login`}\r\n                autoComplete=\"off\"\r\n                autoFocus={name==='email' ? \"on\" : \"off\"}\r\n            />\r\n            <svg className=\"login-form__icon\">\r\n                <use xlinkHref={`${svgIcon}#icon-${name==='email' ? 'mail' : 'key' }`}></use>\r\n            </svg>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    onSubmit = (formValues) =>  {\r\n        const {email, password} = formValues;\r\n        this.props.login(email, password);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"authen-content\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n                <div className=\"authen-form\">\r\n                    <div className=\"authen-form__heading\">\r\n                        <h1 className=\"authen-form__heading--title\">\r\n                            Welcome to Teachat!\r\n                        </h1>\r\n                        <p className=\"authen-form__heading--text\">\r\n                            Let's login to start!\r\n                        </p>\r\n                        <svg className=\"authen-form__heading--icon\">\r\n                            <use xlinkHref={`${svgIcon}#icon-bubbles`}></use>\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"login-form\">\r\n                        <Field name=\"email\" component={this.renderInput}/>\r\n                        <Field name=\"password\" component={this.renderInput}/>\r\n                        \r\n                        <div className=\"login-form__options\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                name=\"\"\r\n                                className=\"login-form__options__remember-check\"\r\n                                id=\"remember-me\"\r\n                            />\r\n                            <label\r\n                                htmlFor=\"remember-me\"\r\n                                className=\"login-form__options__remember-label\"\r\n                            >\r\n                                <span>\r\n                                    <svg className=\"login-form__options__check-icon\">\r\n                                        <use\r\n                                            xlinkHref={`${svgIcon}#icon-check`}\r\n                                        ></use>\r\n                                    </svg>\r\n                                </span>\r\n                                <span>Remember me</span>\r\n                            </label>\r\n\r\n                            <a\r\n                                href=\"/\"\r\n                                className=\"login-form__options__forgot-password\"\r\n                            >\r\n                                Forgot password?\r\n                            </a>\r\n                        </div>\r\n\r\n                        <Button\r\n                            className={'medium-margin-bottom'}\r\n                            type={'button'}\r\n                            text={'Login'}\r\n                        />\r\n                    </div>\r\n\r\n                    <Button\r\n                        className={'medium-margin-bottom'}\r\n                        type={'anchor'}\r\n                        text={\"Don't have any account?\"}\r\n                    />\r\n\r\n                    <p className=\"copyright-text\">\r\n                        &copy; 2020 Tuanle207 All Rights Reserved\r\n                    </p>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n// const validate = (formValues) => {\r\n//     const errors = {};\r\n//     if (!formValues.email) {\r\n//         errors.email = 'You must enter the email';\r\n//     }\r\n    \r\n//     if (!formValues.password) {\r\n//         errors.password = 'You must enter the password';\r\n//     }\r\n//     return errors;\r\n// }\r\n\r\nconst reduxLoginForm = reduxForm({\r\n    form: 'login'\r\n    // validate\r\n})(Login);\r\n\r\nexport default connect(null, { login })(reduxLoginForm);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PointSpreadLoading} from 'react-loadingg';\r\n\r\nimport './LoginForm.css';\r\nimport BackgroundVideo from '../BackgroundVideo/BackgroundVideo';\r\nimport Login from './Login/Login';\r\nimport {checkLoggedIn} from '../../actions'\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.checkLoggedIn();\r\n        document.title = 'Teachat | Login'\r\n    }\r\n    \r\n    render() {\r\n        if (this.props.isLoggedIn) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n        if (this.props.UIState.loginLoading) {\r\n            return <PointSpreadLoading />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"login-wrapper\">\r\n                <BackgroundVideo />\r\n                <Login />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const isLoggedIn = state.authReducer.loggedIn;\r\n    return {isLoggedIn, UIState: state.UIState};\r\n}\r\n\r\nexport default connect(mapStateToProps, {checkLoggedIn})(LoginForm);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\nshowFriendRequests,\r\ngetFriendRequest,\r\nshowUserOperation,\r\nlogout,\r\nacceptFriendRequest,\r\nreceiveFriendRequest,\r\nremoveFriendRequest,\r\ngetChats\r\n} from '../../../../actions';\r\nimport socket from '../../../../apis/socketio';\r\n\r\nimport svgIcon from '../../../../img/sprite.svg'\r\nimport './ProfileBox.css';\r\n\r\nclass ProfileBox extends React.Component {\r\n\r\n    componentDidMount() {\r\n        socket.on('friendRequest',this.props.receiveFriendRequest)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentUser) {\r\n            this.props.getFriendRequest();\r\n        }\r\n    }\r\n    // componentDidUpdate(preProps) {\r\n    //      // Make sure only emit one time\r\n    //     if (this.props.currentUser && !preProps.currentUser) {\r\n    //         console.log('before');\r\n    //         socket.emit('joinFriendRequest', {userId: this.props.currentUser._id});\r\n    //         console.log('after');\r\n    //     }\r\n    // }\r\n\r\n    showFriendRequests = () => {\r\n        this.props.showFriendRequests(!this.props.UIState.friendRequestsShowing);\r\n    }\r\n    showUserOperation = () => {\r\n        this.props.showUserOperation(!this.props.UIState.userOperationShowing);\r\n    }\r\n    acceptFriend = requestId => {\r\n        this.props.acceptFriendRequest(requestId);\r\n    }\r\n    \r\n    renderFriendRequest = () => {\r\n        if (this.props.friendRequests.length === 0) {\r\n            return (\r\n                <li className=\"friend-list-no-item\" style={{marginTop: '8rem'}}>\r\n                    No friend request.\r\n                </li>\r\n            );\r\n        }\r\n        return this.props.friendRequests.map(({from, _id}) => {\r\n            return (\r\n                <li className=\"notification__content--item\" key={from.name}>\r\n                    <img\r\n                    src=\"http://localhost:5000/img/user.jpg\"\r\n                    alt={from.name}/>\r\n                    <div>\r\n                        <p>{from.nickName}</p>\r\n                        <p>{from.name}</p>\r\n                    </div>\r\n                    <button onClick={this.acceptFriend.bind(null, _id)}>Accept</button>\r\n                    <button onClick={this.props.removeFriendRequest.bind(null, _id)}>Remove</button>\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"profile\">\r\n                <figure className=\"profile__card\">\r\n                    <img\r\n                    src=\"http://localhost:5000/img/user.jpg\"\r\n                    alt={this.props.currentUser.name}\r\n                    className=\"profile__card__user-icon\"\r\n                    onClick={this.showUserOperation}\r\n                    />\r\n                    <figcaption className=\"profile__card__name\">{this.props.currentUser.name}</figcaption>\r\n                </figure>\r\n                <a className=\"notification\" onClick={this.showFriendRequests}>\r\n                    <svg className={`notification__button ${this.props.UIState.friendRequestsShowing\r\n                        ? 'notification__button--active' : ''}`}>\r\n                        <use xlinkHref={`${svgIcon}#icon-bullhorn`}></use>\r\n                    </svg>\r\n                    {\r\n                        this.props.friendRequests.length > 0\r\n                        ?\r\n                        (\r\n                            <span className=\"notification__text\">{this.props.friendRequests.length}</span>\r\n                        )\r\n                        :\r\n                        null\r\n                    }\r\n                </a>\r\n                <div className={this.props.UIState.friendRequestsShowing ?\r\n                     'notification__content notification__content--active' : 'notification__content'}>\r\n                    <div className=\"notification__wrapper\">\r\n                        <p>\r\n                            Friend Requests\r\n                        </p>\r\n                        <ul className=\"notification__content--list\">\r\n                            {this.renderFriendRequest()}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div className={`options ${this.props.UIState.userOperationShowing ?\r\n                'options--active' : ''}`}>\r\n                    <ul className=\"options__list\">\r\n                        <li className=\"options__item\">\r\n                            <svg>\r\n                                <use xlinkHref={`${svgIcon}#icon-radio-checked`}></use>\r\n                            </svg>\r\n                            <span>Change online status</span>\r\n                        </li>\r\n                        <li className=\"options__item\">\r\n                            <svg>\r\n                                <use xlinkHref={`${svgIcon}#icon-user-tie`}></use>\r\n                            </svg>\r\n                            <span>Change profile picture</span>\r\n                        </li>\r\n                        <li className=\"options__item\">\r\n                            <svg>\r\n                                <use xlinkHref={`${svgIcon}#icon-key`}></use>\r\n                            </svg>\r\n                            <span>Change Password</span>\r\n                        </li>\r\n                        <li className=\"options__item\" onClick={this.props.logout}>\r\n                            <svg>\r\n                                <use xlinkHref={`${svgIcon}#icon-exit`}></use>\r\n                            </svg>\r\n                            <span>Logout</span>\r\n                        </li>\r\n\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUser: state.authReducer.user,\r\n        UIState: state.UIState,\r\n        friendRequests: state.friendRequests\r\n    };\r\n}\r\nconst mapDispatchToProps = {\r\n    showFriendRequests,\r\n    showUserOperation,\r\n    getFriendRequest,\r\n    logout,\r\n    acceptFriendRequest,\r\n    receiveFriendRequest,\r\n    removeFriendRequest,\r\n    getChats\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileBox);\r\n\r\n\r\n/**\r\n * 1,) USING SOCKETIO FOR REALTIME\r\n */","import React from 'react';\r\n\r\nimport './Spinner.css';\r\nimport svgIcon from '../../img/sprite.svg';\r\n\r\nconst Spinner = ({color}) => {\r\n    let style = {};\r\n    if (color) {\r\n        style.fill = color;\r\n    }  \r\n    return (\r\n    <div className=\"spinner\">\r\n        <svg className=\"spinner__icon\" style={style}>\r\n            <use xlinkHref={`${svgIcon}#icon-spinner`}></use>\r\n        </svg>\r\n    </div>)\r\n    }\r\nexport default Spinner;","export const limitWordsInText = (text, length = 36) => {\r\n    let result = '';\r\n    \r\n    if (text.length <= 36) {\r\n        result = text;\r\n    } else if (text[length] === ' ' || !text.includes(' ')) {\r\n        result = text.substr(0, length);\r\n    } else {\r\n        let count=length;\r\n        while (text[count] !== ' ') {\r\n            count--;\r\n        }\r\n        result = text.substr(0, count);\r\n    }\r\n\r\n    result = text.length > 36 ? result + ' ...' : result; \r\n    return result;\r\n}\r\n/**\r\n * Parameter: An array has the format which contain just 2 types of element\r\n * Group these element into sub-group which contain a unique type of element and\r\n * keep order of these element \r\n * example: [1,1,2,2,2,2,1,1,1,2,1] -> [ [1,1], [2,2,2,2], [1,1,1], [2] , [1] ]\r\n */\r\nexport const groupArrayItems = (arr) => {\r\n    if (arr.length <= 1) {\r\n        return [arr];\r\n    }\r\n    let lastItem = arr[0];\r\n    let temp = [lastItem];\r\n    const result = [];\r\n    for (let i = 1; i < arr.length; i++) {\r\n        if (arr[i].sender === lastItem.sender) {\r\n            temp.push(arr[i]);\r\n            if (i === arr.length - 1) {\r\n                result.push(temp);\r\n            }\r\n            continue;\r\n        }\r\n        if (arr[i].sender !== lastItem.sender) {\r\n            lastItem = arr[i];\r\n            result.push(temp);\r\n            temp = [lastItem];\r\n        }\r\n        if (i === arr.length - 1) {\r\n            result.push(temp);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nconst compareDate = (chatA, chatB) => {\r\n    if (!chatA.latestMessage && !chatB.latestMessage) {\r\n        return 0;\r\n    }\r\n    if (!chatA.latestMessage) {\r\n        return 1;\r\n    }\r\n    if (!chatB.latestMessage) {\r\n        return -1;\r\n    }\r\n    const date1 = new Date(chatA.latestMessage.sentAt);\r\n    const date2 = new Date(chatB.latestMessage.sentAt);\r\n    if (date1 > date2) {\r\n        return -1;\r\n    }\r\n    if (date1 < date2) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport const ObjectToArray = (obj) => {\r\n    return Object.keys(obj).map(el => obj[el]);\r\n}\r\n\r\nexport const sortArrayOfObjectByDate = (arr) => {\r\n    return arr.sort(compareDate)\r\n}\r\n\r\nexport const onChangeSubmit = (onChange, handleSubmit) => {\r\n    return (event) => {\r\n        onChange(event);\r\n        setTimeout(()=>{\r\n            handleSubmit();\r\n        }, 100);\r\n    }\r\n}\r\n\r\nexport const isEmptyObject = (obj) => {\r\n    return obj === null || obj === undefined || (Object.keys(obj).length === 0 && obj.constructor === Object);\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nimport Spinner from '../../../Spinner/Spinner';\r\nimport {getChats, startChat, resetMessagesLoading} from '../../../../actions';\r\nimport {limitWordsInText, ObjectToArray, sortArrayOfObjectByDate} from '../../../../utils';\r\n\r\nimport './ChatList.css';\r\n\r\nclass ChatList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getChats();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (Object.keys(this.props.chats).length !== 0 && !this.props.currentChat) {\r\n            this.props.startChat(this.props.chats[Object.keys(this.props.chats)[0]]);\r\n        }\r\n        // if (this.props.UIState.messagesLoading) {\r\n        //     this.props.resetMessagesLoading();\r\n        // }   \r\n    }\r\n\r\n    renderMessageSender(chat) {\r\n        let lastMessageSender = null;\r\n        if (chat.latestMessage) {\r\n            lastMessageSender = chat.latestMessage.sender === this.props.currentUser._id\r\n            ?\r\n            (\r\n                <span className=\"friends__card__text--message__current-user\"\r\n                        >You:&nbsp; \r\n                </span>\r\n            )\r\n            :\r\n            null;\r\n        }\r\n        return lastMessageSender;\r\n    }\r\n\r\n    getFriend(chat) {\r\n        return chat.participants.find(x => x._id !== this.props.currentUser._id);\r\n    }\r\n\r\n\r\n    renderChats() {\r\n        if (ObjectToArray(this.props.chats).length === 0) {\r\n            return (\r\n                <li className=\"chat-list-no-item\">\r\n                    No Chat found.\r\n                </li>\r\n            );\r\n        }\r\n\r\n        return sortArrayOfObjectByDate(ObjectToArray(this.props.chats)).map(chat => {\r\n            const participant = this.getFriend(chat);\r\n                let additionalClass = '';\r\n                if (this.props.currentChat) {\r\n                    additionalClass = participant._id === this.getFriend(this.props.currentChat)._id ? 'friends__item--active' : ''\r\n                }\r\n                \r\n                return (\r\n                    <li \r\n                    onClick={this.props.startChat.bind(null, chat)} \r\n                    key={chat._id} \r\n                    className={`friends__item ${additionalClass}`}\r\n                    >\r\n                        <figure className=\"friends__card\">\r\n                            <img\r\n                            src=\"http://localhost:5000/img/user.jpg\"\r\n                            alt={participant.name}\r\n                            className=\"friends__card__photo\"\r\n                            />\r\n                            <figcaption className=\"friends__card__text\">\r\n                                <p className=\"friends__card__text--name\">\r\n                                    {participant.name}\r\n                                </p>\r\n                                <p className=\"friends__card__text--message\">\r\n                                    {this.renderMessageSender(chat)}\r\n                                    {chat.latestMessage ? limitWordsInText(chat.latestMessage.text) : null}\r\n                                </p>\r\n                            </figcaption>\r\n                        </figure>\r\n                    </li>\r\n                )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"friends\">\r\n                    {this.props.UIState.chatsLoading\r\n                    ? (\r\n                        <Spinner/>\r\n                    )\r\n                    : (<ul className=\"friends__list\">\r\n                        { this.renderChats() }\r\n                    </ul>\r\n                    )}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chats: state.chatsReducer,\r\n        currentUser: state.authReducer.user,\r\n        currentChat: state.currentChat,\r\n        UIState: state.UIState\r\n    };\r\n}\r\nexport default connect(mapStateToProps, {getChats, startChat, resetMessagesLoading})(ChatList);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {showSearchPeople} from '../../../../actions';\r\n\r\nimport svgIcon from '../../../../img/sprite.svg'\r\nimport './BottomBar.css';\r\n\r\nclass BottomBar extends React.Component {\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"bottom-bar\">\r\n                <button className=\"bottom-bar__button\" onClick={this.props.showSearchPeople.bind(null, true)}>\r\n                    <svg className=\"bottom-bar__icon\">\r\n                        <use xlinkHref={`${svgIcon}#icon-user-plus`}></use>\r\n                    </svg>\r\n                    <span className=\"bottom-bar__text\">\r\n                    Add friend\r\n                    </span>\r\n                </button>\r\n                <button className=\"bottom-bar__button\">\r\n                    <svg className=\"bottom-bar__icon\">\r\n                        <use xlinkHref={`${svgIcon}#icon-cog`}></use>\r\n                    </svg>\r\n                    <span className=\"bottom-bar__text\">\r\n                    Settings\r\n                    </span>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentUser: state.authReducer.user,\r\n        UIState: state.UIState\r\n    };\r\n}\r\nexport default connect(mapStateToProps, {showSearchPeople})(BottomBar);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nimport {onChangeSubmit} from '../../../../../utils';\r\nimport {searchFriends} from '../../../../../actions';\r\nimport svgIcon from '../../../../../img/sprite.svg'\r\nimport '../../ChatSearchBar/ChatSearchBar.css';\r\n\r\n\r\n\r\nclass FriendSearchForm extends React.Component {\r\n\r\n    renderInput = ({input, meta}) => {\r\n        return (\r\n            <input\r\n                {...input}\r\n                type=\"text\"\r\n                className=\"search__input\"\r\n                placeholder=\"Type people name\"\r\n                id=\"input-peopleSeacrhKeyword\"\r\n                autoFocus=\"on\"\r\n                autoComplete=\"off\"\r\n                onChange={onChangeSubmit(input.onChange, this.props.handleSubmit(this.onSubmit))}\r\n            />\r\n        )\r\n    }\r\n    \r\n    onSubmit = (formValues) => {\r\n        this.props.searchFriends(formValues.peopleSearchKeyword);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} \r\n            style={{display: \"flex\"}} className=\"search\">\r\n                <svg className=\"search__icon\">\r\n                    <use xlinkHref={`${svgIcon}#icon-search`}></use>\r\n                </svg>\r\n                <Field name=\"peopleSearchKeyword\" component={this.renderInput}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst FriendSearch = reduxForm({\r\n    form: 'peopleSearch'\r\n})(FriendSearchForm);\r\n\r\n\r\nexport default connect(null, {searchFriends})(FriendSearch);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport svgIcon from '../../../../../img/sprite.svg'\r\nimport './FriendSearchList.css';\r\nimport {searchFriends, sendFriendRequest} from '../../../../../actions';\r\n\r\n\r\nclass FriendSearchList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.searchFriends();\r\n    }\r\n\r\n    isFriend = (id) => {\r\n        return this.props.user.friends.includes(id);\r\n    }\r\n\r\n    renderRelationOption = (id, friendRequested) => {\r\n        if (this.isFriend(id)) {\r\n            return (\r\n                <svg>\r\n                    <use xlinkHref={`${svgIcon}#icon-user-check`}></use>\r\n                </svg>\r\n            );\r\n        }\r\n        if (friendRequested) {\r\n            return (\r\n                <svg>\r\n                    <use xlinkHref={`${svgIcon}#icon-checkmark`}></use>\r\n                </svg>\r\n            );\r\n        }\r\n        return (\r\n            <svg onClick={this.props.sendFriendRequest.bind(null, id)}>\r\n                <use xlinkHref={`${svgIcon}#icon-plus`}></use>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    renderPeople() {\r\n        if (!this.props.people || this.props.people.length === 0) {\r\n            return (\r\n                <li className=\"friend-list-no-item\">\r\n                    No friends found.\r\n                </li>\r\n            );\r\n        }\r\n        if (this.props.people) {\r\n            return this.props.people.map(el => {\r\n                return (\r\n                    <li className=\"friend-list-item\" key={el._id}>\r\n                        <img src=\"http://localhost:5000/img/user.jpg\" alt={el.nickName}/>\r\n                        <div>\r\n                            <p>{el.nickName}</p>\r\n                            <p>{el.name}</p>\r\n                        </div>\r\n                        {this.renderRelationOption(el._id, el.friendRequested)}\r\n                    </li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"friend-list-box\">\r\n                <ul className=\"friend-list\">\r\n                    {this.renderPeople()}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        people: state.peopleReducer,\r\n        user: state.authReducer.user\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {searchFriends, sendFriendRequest})(FriendSearchList);","import React from 'react';\r\nimport './FriendSearch.css';\r\nimport svgIcon from '../../../../img/sprite.svg';\r\nimport FriendSearchForm from './FriendSearchForm/FriendSearchForm';\r\nimport {showSearchPeople} from '../../../../actions';\r\nimport { connect } from 'react-redux';\r\nimport FriendSearchList from './FriendSearchList/FriendSearchList';\r\n\r\nclass FriendSearch extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className={`friend-search ${!this.props.UIState.searchPeopleShowing ? 'friend-search--inactive' : ''}`}>\r\n                <div className=\"friend-search__title\">\r\n                    <p>Search people</p>\r\n                    <svg onClick={() => this.props.showSearchPeople(false)}>\r\n                        <use xlinkHref={`${svgIcon}#icon-cross`}></use>\r\n                    </svg>\r\n                </div>\r\n                <FriendSearchForm/>\r\n                <FriendSearchList/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({ UIState: state.UIState })\r\n\r\nexport default connect(mapStateToProps, {showSearchPeople})(FriendSearch);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {reduxForm, Field} from 'redux-form'\r\nimport {getChats} from '../../../../actions';\r\nimport {onChangeSubmit} from '../../../../utils';\r\n\r\nimport svgIcon from '../../../../img/sprite.svg'\r\nimport './ChatSearchBar.css';\r\n\r\nclass ChatSearchBar extends React.Component {\r\n\r\n    renderInput = ({input, meta}) => {\r\n        return (\r\n            <input\r\n                {...input}\r\n                type=\"text\"\r\n                className=\"search__input\"\r\n                placeholder=\"Type friend name\"\r\n                id=\"input-chatSeacrhKeyword\"\r\n                autoFocus=\"on\"\r\n                autoComplete=\"off\"\r\n                onChange={onChangeSubmit(input.onChange, this.props.handleSubmit(this.onSubmit))}\r\n            />\r\n        )\r\n    }\r\n    \r\n    onSubmit = (formValues) => {\r\n        this.props.getChats(formValues.chatSearchKeyword);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"search\">\r\n                <svg className=\"search__icon\">\r\n                    <use xlinkHref={`${svgIcon}#icon-search`}></use>\r\n                </svg>\r\n                <Field name=\"chatSearchKeyword\" component={this.renderInput}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst ChatSearchBarForm = reduxForm({\r\n    form: 'chatSearch'\r\n})(ChatSearchBar);\r\n\r\n\r\nexport default connect(null, {getChats})(ChatSearchBarForm);","import React from 'react';\r\n\r\nimport './SideBar.css';\r\nimport ProfileBox from './ProfileBox/ProfileBox';\r\nimport ChatList from './ChatList/ChatList';\r\nimport BottomBar from './BottomBar/BottomBar';\r\nimport FriendSearch from './FriendSearch/FriendSearch';\r\nimport ChatSearchBar from './ChatSearchBar/ChatSearchBar';\r\nimport { connect } from 'react-redux';\r\n\r\nclass SideBar extends React.Component {\r\n\r\n   \r\n    render() {\r\n        return (\r\n            <div className=\"side-nav\">\r\n                <ProfileBox/>\r\n                <ChatSearchBar/>\r\n                <ChatList/>\r\n                <BottomBar/>\r\n                {this.props.UIState.searchPeopleShowing ? <FriendSearch/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({ UIState: state.UIState });\r\n\r\nexport default connect(mapStateToProps, null)(SideBar);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport svgIcon from '../../../../img/sprite.svg';\r\nimport './TopBar.css';\r\n\r\nclass TopBar extends React.Component {\r\n\r\n    render() {\r\n        if (!this.props.currentChat) {\r\n            return (\r\n                <div className=\"top-bar\">\r\n                </div>\r\n            )\r\n        }\r\n        const currentFriend = this.props.currentChat.participants.find(el => el._id !== this.props.user._id); \r\n        return (\r\n            <div className=\"top-bar\">\r\n                <figure className=\"top-bar__card\">\r\n                    <img\r\n                    src=\"http://localhost:5000/img/user.jpg\"\r\n                    alt={currentFriend.name}\r\n                    className=\"top-bar__card__user-icon\"\r\n                    />\r\n                    <figcation className=\"top-bar__card__name\">{currentFriend.name}</figcation>\r\n                </figure>\r\n                <div className=\"top-bar__live-contact\">\r\n                    <svg className=\"top-bar__icon\">\r\n                        <use xlinkHref={`${svgIcon}#icon-phone`}></use>\r\n                    </svg>\r\n                    <svg className=\"top-bar__icon\">\r\n                        <use xlinkHref={`${svgIcon}#icon-video-camera`}></use>\r\n                    </svg>\r\n                    <svg className=\"top-bar__icon\">\r\n                        <use\r\n                        xlinkHref={`${svgIcon}#icon-dots-three-vertical`}></use>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentChat: state.currentChat,\r\n        user: state.authReducer.user\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopBar);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {reduxForm, Field, reset} from 'redux-form'\r\n\r\nimport svgIcon from '../../../../img/sprite.svg';\r\nimport {sendMessage, showEmoji} from '../../../../actions';\r\n\r\nimport './ChatInput.css';\r\n\r\nclass ChatInput extends React.Component {\r\n\r\n    renderInput = ({input, meta}) => {\r\n        return (\r\n            <input\r\n                {...input}\r\n                type=\"text\"\r\n                className=\"form-input__input\"\r\n                placeholder=\"Write your message...\"\r\n                id=\"input-message\"\r\n                autoFocus=\"on\"\r\n                autoComplete=\"off\"\r\n                onClick={this.props.showEmoji.bind(null, false)}\r\n            />\r\n        )\r\n    }\r\n\r\n    onSubmit = (formValues) => {\r\n        const {message} = formValues;\r\n        if (!message || message.trim() === '') {\r\n            return;\r\n        }\r\n        this.props.sendMessage({\r\n            sentAt: new Date(),\r\n            chat: this.props.currentChat._id,\r\n            sender: this.props.user._id,\r\n            text: message\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"form-input\">\r\n                <Field name=\"message\" component={this.renderInput}/>\r\n                <div className=\"form-input__options\">\r\n                    <svg className=\"form-input__icon\" onClick={this.props.showEmoji.bind(null, !this.props.UIState.emojiShowing)}>\r\n                        <use xlinkHref={`${svgIcon}#icon-smile`}></use>\r\n                    </svg>\r\n                    <svg className=\"form-input__icon\">\r\n                        <use xlinkHref={`${svgIcon}#icon-attachment`}></use>\r\n                    </svg>\r\n                    <svg className=\"form-input__icon\" onClick={this.props.handleSubmit(this.onSubmit)}>\r\n                        <use xlinkHref={`${svgIcon}#icon-paper-plane`}></use>\r\n                    </svg>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst ChatInputForm = reduxForm({\r\n    form: 'chatInput',\r\n    onSubmitSuccess: (result, dispatch) => {\r\n        dispatch(reset('chatInput'))\r\n    }\r\n})(ChatInput);\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentChat: state.currentChat,\r\n        user: state.authReducer.user,\r\n        UIState: state.UIState\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, {sendMessage, showEmoji})(ChatInputForm);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport socket from '../../../../apis/socketio';\r\nimport {receiveMessage} from '../../../../actions';\r\nimport {groupArrayItems, isEmptyObject} from '../../../../utils';\r\n\r\nimport Spinner from './../../../Spinner/Spinner';\r\nimport './ConversationBox.css';\r\n\r\nclass ConversationBox extends React.Component {\r\n    ref = React.createRef();\r\n\r\n    componentDidMount() {\r\n        socket.on('message', this.props.receiveMessage);\r\n    }\r\n\r\n    componentDidUpdate(preProps) {\r\n        if (this.ref.current) {\r\n            this.ref.current.scrollTop = this.ref.current.scrollHeight;\r\n        }\r\n        // Make sure only emit one time\r\n        // if (this.props.currentChat) {\r\n        //     if (!preProps.currentChat || this.props.currentChat._id !== preProps.currentChat._id) {\r\n        //         socket.emit('join', {idChat: this.props.currentChat._id});\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    renderMessages() {\r\n\r\n        if (this.props.UIState.messagesLoading) {\r\n            return (\r\n                <Spinner />\r\n            )\r\n        }\r\n        if (isEmptyObject(this.props.messages)) {\r\n            return (\r\n                <ul className=\"conversation__list--no-item\">\r\n                    Make new friends to start chatting!\r\n                </ul>\r\n            );\r\n        }\r\n        // if (!this.props.currentChat || !this.props.messages[this.props.currentChat._id]) {\r\n        //     return (\r\n        //         <ul className=\"conversation__list--no-item\">\r\n        //             No messages available. Start talking with your friend!\r\n        //         </ul>\r\n        //     );\r\n        // }\r\n        if (this.props.currentChat && isEmptyObject(this.props.messages[this.props.currentChat._id])) {\r\n            return (\r\n                <ul className=\"conversation__list--no-item\">\r\n                    No messages available. Start talking with your friend!\r\n                </ul>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <ul className=\"conversation__list\">\r\n                {\r\n                    groupArrayItems(this.props.messages[this.props.currentChat._id]).map(messages => {\r\n                        return messages.map((message, i, arr) => {\r\n                            let additionalClass = '';\r\n                            additionalClass = message.sender === this.props.user._id ? \r\n                            'conversation__message--right' : 'conversation__message--left';\r\n                            let margin = i === arr.length - 1 ?\r\n                            'medium-margin-bottom' : '' ;\r\n    \r\n                            return (\r\n                                <li key={message._id}\r\n                                    className={`conversation__message ${additionalClass} ${margin}`}\r\n                                    >\r\n                                    <img\r\n                                        src=\"http://localhost:5000/img/user.jpg\"\r\n                                        alt=\"Anathan Pham\"\r\n                                        className=\"conversation__message__img\"\r\n                                    />\r\n                                    <p className=\"conversation__message__text\">\r\n                                        {message.text}\r\n                                    </p>\r\n                                </li>\r\n                            )\r\n                        })\r\n                        \r\n                    })\r\n                }\r\n            </ul>\r\n        ) \r\n        \r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"conversation\" ref={this.ref}>\r\n                {this.renderMessages()}                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messages,\r\n\t\tcurrentChat: state.currentChat,\r\n        user: state.authReducer.user,\r\n        UIState: state.UIState\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {receiveMessage})(ConversationBox);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Picker } from 'emoji-mart';\r\nimport {change} from 'redux-form'\r\nimport {showEmoji} from '../../../../actions'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport './EmojiBox.css';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nclass EmojtBox extends React.Component {\r\n\r\n    onEmojiClick = (emoji) => {\r\n        let message = '';\r\n        if (this.props.form && this.props.form.chatInput && this.props.form.chatInput.values) {\r\n            message = this.props.form.chatInput.values.message;\r\n        }\r\n        this.props.showEmoji(false);\r\n        this.props.change('chatInput', 'message', message + emoji.native);\r\n    }\r\n    render() {\r\n        const additionalClass = this.props.UIState.emojiShowing ? 'emoji-box--active' : '';\r\n        return (\r\n            <div className={`emoji-box ${additionalClass}`}>\r\n                <Picker onClick={this.onEmojiClick} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        UIState: state.UIState,\r\n        form: state.form\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({change, showEmoji}, dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojtBox);","import React from 'react';\r\n\r\nimport './Conversation.css';\r\nimport TopBar from './TopBar/TopBar';\r\nimport ChatInput from './ChatInput/ChatInput';\r\nimport ConversationBox from './ConversationBox/ConversationBox';\r\nimport EmojtBox from './EmojiBox/EmojiBox';\r\n\r\n\r\n\r\nclass Conversation extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat\">\r\n                <TopBar />\r\n                <ConversationBox/>\r\n                <EmojtBox />\r\n                <ChatInput />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Conversation;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport {checkLoggedIn} from '../../actions'\r\n\r\nimport './Chat.css'\r\nimport BackgroundVideo from '../BackgroundVideo/BackgroundVideo';\r\nimport SideBar from './SideBar/SideBar';\r\nimport Conversation from './Conversation/Conversation';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.checkLoggedIn();\r\n        document.title = 'Teachat — Instant and secure chatting with your friends';\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isLoggedIn) {\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <BackgroundVideo />\r\n                <SideBar/>\r\n                <Conversation/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const isLoggedIn = state.authReducer.loggedIn;\r\n    return {isLoggedIn};\r\n}\r\n\r\nexport default connect(mapStateToProps, {checkLoggedIn})(Chat);","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport LoginForm from '../LoginForm/LoginForm';\r\nimport './App.css';\r\nimport Chat from '../Chat/Chat';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Route path=\"/login\" exact component={LoginForm} />\r\n                <Route path=\"/\" exact component={Chat} />\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducers from './reducers';\r\nimport reduxThunk from 'redux-thunk';\r\nimport App from './components/App/App';\r\n\r\nconst composeEnhancers = (window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}